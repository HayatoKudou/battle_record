[{"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/Main.js":"1","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Register.js":"2","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/parts/header.js":"3","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/common.js":"4","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/index.js":"5","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Auth.js":"6","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Login.js":"7","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Reset.js":"8","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/reportWebVitals.js":"9","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/webpush.js":"10","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/page/contact.js":"11","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/page/BulletinBoard.js":"12","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/User.js":"13","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/App.js":"14"},{"size":2573,"mtime":1611901862281,"results":"15","hashOfConfig":"16"},{"size":10055,"mtime":1611900354259,"results":"17","hashOfConfig":"16"},{"size":10120,"mtime":1611901427503,"results":"18","hashOfConfig":"16"},{"size":1220,"mtime":1611900763788,"results":"19","hashOfConfig":"16"},{"size":536,"mtime":1611206996042,"results":"20","hashOfConfig":"16"},{"size":210,"mtime":1610864223876,"results":"21","hashOfConfig":"16"},{"size":5190,"mtime":1611900352576,"results":"22","hashOfConfig":"16"},{"size":5255,"mtime":1611900398256,"results":"23","hashOfConfig":"16"},{"size":362,"mtime":1610818340760,"results":"24","hashOfConfig":"16"},{"size":603,"mtime":1611883523950,"results":"25","hashOfConfig":"16"},{"size":4149,"mtime":1611899363898,"results":"26","hashOfConfig":"16"},{"size":31295,"mtime":1611989232194,"results":"27","hashOfConfig":"16"},{"size":705,"mtime":1611901379558,"results":"28","hashOfConfig":"16"},{"size":530,"mtime":1610859796857,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"add4b",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/Main.js",["64"],"import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n//   useLocation,\n} from 'react-router-dom';\nimport { serverUrl } from '../common';\n\nimport App from './App';\nimport Login from './auth/Login';\nimport Register from './auth/Register';\nimport Reset from './auth/Reset';\nimport BulletinBoard from './page/BulletinBoard';\nimport Auth from './auth/Auth';\nimport User from './auth/User';\nimport {webpush} from '../webpush';\nimport Contact from './page/contact';\n\nfunction usePageViews() {\n\n    // const title    = '見出し';\n    // const options  = {\n    //     body : '本文',\n    //     data : {\n    //       foo : '任意のデータ'\n    //      }\n    // };\n    // webpush(title, options);\n\n    //デバイスの登録\n    if (navigator.userAgent.match(/iPhone|Android.+Mobile/)) {\n        User.set('device', 'smartphone');\n    } else {\n        User.set('device', 'pc');\n    }\n\n    var data = {\n        user_id: User.isLoggedIn() ? JSON.parse(User.getLocalStorage('user')).id  : localStorage.getItem(\"user\") === null ? null : JSON.parse(User.getLocalStorage('user')).id,\n    }\n    fetch(serverUrl + '/api/get_notice', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json',},\n        body: JSON.stringify(data),\n    })\n    .then(response => {\n        if (!response.ok) {\n            console.log(response);\n        } else {\n            return response.json().then(data => {\n                if('errors' in data){\n                    console.log(data.errors);\n                } else {\n                    if('notice' in data){\n                        User.setArr('notice', data.notice);\n                    }\n                }\n            });\n        }\n    }).catch(error => {\n        console.log(error);\n    })\n}\n\nfunction RouterApp() {\n    usePageViews();\n    return (\n        <Switch>\n                <Route exact path=\"/\" component={BulletinBoard} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/reset\" component={Reset} />\n                <Route exact path=\"/register\" component={Register} />\n                <Route exact path=\"/contact\" component={Contact} />\n            <Auth>\n                {/* ログイン必須ページ */}\n                <Switch>\n                    <Route exact path=\"/profile\" component={App} />\n                </Switch>\n            </Auth>\n        </Switch>\n    );\n}\n\nexport default class Main extends Component {\n  render() {\n    return (\n        <Router>\n            <RouterApp />\n        </Router>\n    );\n  }\n}","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Register.js",[],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/parts/header.js",["65"],"import React, {useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport User from '../auth/User';\nimport { diffDate, serverUrl } from '../../common';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Drawer from '@material-ui/core/Drawer';\nimport Badge from '@material-ui/core/Badge';\nimport { FixedSizeList } from 'react-window';\n\nimport MailIcon from '@material-ui/icons/Mail';\nimport Paper from '@material-ui/core/Paper';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    title_pc: {\n        flexGrow: 1,\n    },\n    title_smartphone: {\n        width: '50%',\n    },\n    userName_pc: {\n        fontSize: 15,\n    },\n    userName_smart: {\n        fontSize: 13,\n    },\n    list: {\n        width: 250,\n        backgroundColor: theme.palette.background.paper,\n    },\n    list_checked: {\n        color: '#1976d2',\n        padding: '5px 0 0 0 !important',\n    },\n    list_nochecked: {\n        padding: '0 0 0 30px !important',\n    },\n    menuButton: {\n        marginLeft: -12,\n        marginRight: 20,\n    },\n    header_icons: {\n        display: 'flex',\n    },\n    header_icon_smart: {\n        padding: '7px',\n    }\n}));\n\nfunction ListItemLink(props) {\n    return <ListItem button component=\"a\" {...props} />;\n  }\n\nexport default function MenuAppBar() {\n\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n    const [left_open, set_left_open] = useState(false);\n    const [badge_open, set_badge_open] = useState(false);\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    function clearNotice(){\n        var data = {\n            user_id: User.isLoggedIn() ? JSON.parse(User.getLocalStorage('user')).id  : localStorage.getItem(\"user\") === null ? null : JSON.parse(User.getLocalStorage('user')).id,\n        }\n        fetch(serverUrl + '/api/clear_notice', {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json',},\n            body: JSON.stringify(data),\n        })\n        .then(response => {\n            if (!response.ok) {\n                console.log(response);\n            } else {\n                return response.json().then(data => {\n                    if('errors' in data){\n                        console.log(data.errors);\n                    } else {\n                        User.set('notice', data.notice);\n                    }\n                });\n            }\n        }).catch(error => {\n            console.log(error);\n        })\n    }\n\n    const sideList = (\n        <div className={classes.list}>\n            <List>\n                <ListItemLink href=\"/\">\n                    <ListItemText className={classes.list_checked} primary=\"Apex Legends エーペックスレジェンズ掲示板\" />\n                </ListItemLink>\n                {User.isLoggedIn() ?\n                <div>\n                    <ListItemLink onClick={() => {User.logout();window.location.reload();}} className={classes.list_nochecked}>\n                        <ListItemText primary=\"ログアウト\" />\n                    </ListItemLink>\n                </div>\n                :\n                <div>\n                    <ListItemLink href=\"/register\" className={classes.list_nochecked}>\n                        <ListItemText primary=\"ユーザー登録\" />\n                    </ListItemLink>\n                    <ListItemLink href=\"/login\" className={classes.list_nochecked}>\n                        <ListItemText primary=\"ログイン\" />\n                    </ListItemLink>\n                </div>\n                }\n                <ListItemLink href=\"/contact\" className={classes.list_nochecked}>\n                    <ListItemText primary=\"お問い合わせ\" />\n                </ListItemLink>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={() => set_left_open(true)}>\n                        <MenuIcon />\n                    </IconButton>\n\n                    <Drawer open={left_open} onClose={() => set_left_open(false)}>\n                      <div\n                        tabIndex={0}\n                        role=\"button\"\n                        onClick={() => set_left_open(false)}\n                        onKeyDown={() => set_left_open(false)}\n                      >\n                        {sideList}\n                      </div>\n                    </Drawer>\n\n                    <Typography variant=\"h6\" className={User.get('device') === 'pc' ? classes.title_pc : classes.title_smartphone + ' header_title'}>\n                        {'Apex Legends エーペックスレジェンズ掲示板'}\n                    </Typography>\n                    <div>\n                        <div className={classes.header_icons}>\n                            <IconButton className={User.get('device') === 'smartphone' ? classes.header_icon_smart : ''} aria-label=\"show 17 new notifications\" color=\"inherit\" onClick={() => {set_badge_open(true);clearNotice()}}>\n                            <Badge badgeContent={JSON.parse(User.getLocalStorage('notice')) != null ? JSON.parse(User.getLocalStorage('notice')).length : 0} color=\"secondary\" max={99}>\n                                <MailIcon  />\n                            </Badge>\n\n                            {badge_open && (\n                                JSON.parse(User.getLocalStorage('notice')) != null && JSON.parse(User.getLocalStorage('notice')).length !== 0 ? (\n                                    <ClickAwayListener onClickAway={() => set_badge_open(false)}>\n                                        <Paper className=\"paper\">\n                                            {JSON.parse(User.getLocalStorage('notice')).map(key => (\n                                                <div key={key.id}>\n                                                    {diffDate(key.created_at) + ': '}{key.notice}\n                                                </div>\n                                            ))}\n                                        </Paper>\n                                    </ClickAwayListener>)\n                                :\n                                (<ClickAwayListener onClickAway={() => set_badge_open(false)}>\n                                    <Paper className=\"paper\">お知らせはありません。</Paper>\n                                </ClickAwayListener>)\n                            )}\n\n                            </IconButton>\n                            <IconButton\n                                className={User.get('device') === 'smartphone' ? classes.header_icon_smart : ''}\n                                aria-label=\"account of current user\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AccountCircle />\n                                <span className={User.get('device') === 'pc' ? classes.userName_pc : classes.userName_smart}>\n                                    {User.isLoggedIn() ?\n                                        JSON.parse(User.getLocalStorage('user')).name.length > 15 ?\n                                        JSON.parse(User.getLocalStorage('user')).name.substr(0, 15) + '...' : JSON.parse(User.getLocalStorage('user')).name\n                                    :\n                                        'ゲストユーザー'\n                                    }\n                                </span>\n                            </IconButton>\n                        </div>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={open}\n                            onClose={handleClose}\n                        >\n                            {User.isLoggedIn() === true ? (\n                                <div>\n                                    {/* <MenuItem><Link to=\"/profile\" className=\"route_link\">プロフィール</Link></MenuItem> */}\n                                    <MenuItem onClick={() => {User.logout();window.location.reload();}}>ログアウト</MenuItem>\n                                </div>)\n                                :\n                                (<div>\n                                    <MenuItem><Link to=\"/register\" className=\"route_link\">ユーザー登録</Link></MenuItem>\n                                    <MenuItem><Link to=\"/login\" className=\"route_link\">ログイン</Link></MenuItem>\n                                </div>\n                                )}\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/common.js",[],["66","67"],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/index.js",[],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Auth.js",[],["68","69"],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Login.js",[],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/Reset.js",["70","71","72","73"],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/reportWebVitals.js",[],["74","75"],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/webpush.js",[],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/page/contact.js",["76","77"],"import React, { useState, useMemo } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport Header from '../parts/header';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { serverUrl } from '../../common';\n\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Alert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    aleart: {\n        marginTop: '20px',\n    },\n    form: {\n        width: '80%',\n        margin: '0 auto',\n    },\n    form_input: {\n        width: '100%',\n        margin: '20px 0 0 0',\n    },\n    post_button: {\n        width: '100%',\n        margin: '20px 0 0 0',\n    },\n    error_message: {\n        fontSize: 17,\n        listStyle: 'none',\n        marginLeft: 30,\n        marginBottom: 15,\n        width: '100% !important',\n    },\n}));\n\nexport default function Contact(){\n\n    const { register, handleSubmit, errors, reset } = useForm();\n    const classes = useStyles();\n    const [error, set_error] = useState('');\n    const [success_aleart, set_success_aleart] = useState('');\n\n    function post(data){\n        if(window.confirm(\"送信しますか?\")){\n            fetch(serverUrl + '/api/contact', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/json',},\n                body: JSON.stringify(data),\n            })\n            .then(response => {\n                if (!response.ok) {\n                    set_error(response);\n                } else {\n                    return response.json().then(data => {\n                        console.log(data);\n                        if('errors' in data){\n                            set_error(data.errors);\n                            set_success_aleart('');\n                        } else {\n                            set_error('');\n                            set_success_aleart(data.message);\n                        }\n                    });\n                }\n            }).catch(error => {\n                set_error(error);\n            })\n        }\n    }\n\n    return(\n        <div>\n            <Header />\n            <form onSubmit={handleSubmit(post)} className={classes.form}>\n\n                {success_aleart !== '' && (\n    \t\t\t\t<Typography component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                        <Alert severity=\"success\">{success_aleart}</Alert>                \n                    </Typography>\n                )}\n                {error !== '' && (\n                    <Typography color=\"error\" component=\"h1\" variant=\"h5\" className={classes.aleart}>\n                        {Object.keys(error).map(key => (\n                            <Alert key={key} severity=\"error\">{error[key]}</Alert>\n                        ))}\n                    </Typography>\n                )}\n\n                <TextField variant=\"outlined\" name=\"email\" size=\"small\" className={classes.form_input}\n                    error={errors.email ? true : false}\n                    inputRef={register({ pattern: /^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}/ })}\n                    helperText={\n                        errors.email && <span className=\"error_message\">メールアドレスの形式が正しくありません。</span>\n                    }\n                    label={'メールアドレス(任意)'}\n                />\n                <TextField variant=\"outlined\" name=\"contents\" multiline rows={3} className={classes.form_input}\n                    error={errors.contents ? true : false}\n                    inputRef={register({ required: true })}\n                    helperText={\n                        errors.contents && <span className=\"error_message\">お問い合わせ内容を入力してください。</span>\n                    }\n                    label={'お問い合わせ内容'}\n                />\n\n                <Button onClick={handleSubmit(post)} className={classes.post_button} variant=\"contained\" color=\"primary\">\n                    送信する\n                </Button>\n            </form>\n        </div>\n    )\n}","/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/page/BulletinBoard.js",["78","79","80"],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/auth/User.js",[],"/Users/kudouhayato/Desktop/project/gamer-lab.net/src/component/App.js",[],{"ruleId":"81","severity":1,"message":"82","line":17,"column":9,"nodeType":"83","messageId":"84","endLine":17,"endColumn":16},{"ruleId":"81","severity":1,"message":"85","line":21,"column":10,"nodeType":"83","messageId":"84","endLine":21,"endColumn":23},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"86","replacedBy":"90"},{"ruleId":"88","replacedBy":"91"},{"ruleId":"81","severity":1,"message":"92","line":12,"column":8,"nodeType":"83","messageId":"84","endLine":12,"endColumn":24},{"ruleId":"81","severity":1,"message":"93","line":13,"column":8,"nodeType":"83","messageId":"84","endLine":13,"endColumn":16},{"ruleId":"81","severity":1,"message":"94","line":61,"column":11,"nodeType":"83","messageId":"84","endLine":61,"endColumn":18},{"ruleId":"81","severity":1,"message":"95","line":64,"column":19,"nodeType":"83","messageId":"84","endLine":64,"endColumn":28},{"ruleId":"86","replacedBy":"96"},{"ruleId":"88","replacedBy":"97"},{"ruleId":"81","severity":1,"message":"98","line":1,"column":27,"nodeType":"83","messageId":"84","endLine":1,"endColumn":34},{"ruleId":"81","severity":1,"message":"99","line":39,"column":45,"nodeType":"83","messageId":"84","endLine":39,"endColumn":50},{"ruleId":"81","severity":1,"message":"100","line":7,"column":21,"nodeType":"83","messageId":"84","endLine":7,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":146,"column":8,"nodeType":"103","endLine":146,"endColumn":21,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":259,"column":21,"nodeType":"107","messageId":"108","endLine":259,"endColumn":23},"no-unused-vars","'webpush' is defined but never used.","Identifier","unusedVar","'FixedSizeList' is defined but never used.","no-native-reassign",["109"],"no-negated-in-lhs",["110"],["109"],["110"],"'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'history' is assigned a value but never used.","'set_error' is assigned a value but never used.",["109"],["110"],"'useMemo' is defined but never used.","'reset' is assigned a value but never used.","'dateFormat' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'filter'. Either include it or remove the dependency array.","ArrayExpression",["111"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [filter]",{"range":"114","text":"115"},[5035,5048],"[filter]"]